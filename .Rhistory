# Load required libraries
library(tidyverse)
library(ComplexHeatmap)
library(FactoMineR)
install.packages("FactoMineR")
library(FactoMineR)
library(factoextra)
install.packages("factoextra")
library(factoextra)
# Define the file path
file_path <- "F:/nmr/biofluids/NMR-based-metabonomics-for-biofluids/Data/Dummy"
# Import the files
file_names <- list.files(file_path, full.names = TRUE, pattern = "Sample_.*\\.csv")
data_list <- lapply(file_names, read.csv)
# Load required libraries
library(tidyverse)
library(ComplexHeatmap)
library(FactoMineR)
library(factoextra)
# Define the file path
file_path <- "F:/nmr/biofluids/NMR-based-metabonomics-for-biofluids/Data/Dummy"
# Import the files
file_names <- list.files(file_path, full.names = TRUE, pattern = "Sample_.*\\.csv")
data_list <- lapply(file_names, read.csv)
# Define the file path
file_path <- "F:/nmr/biofluids/NMR-based-metabonomics-for-biofluids/Data/Dummy"
# Import the files with encoding specified
file_names <- list.files(file_path, full.names = TRUE, pattern = "Sample_.*\\.csv")
data_list <- lapply(file_names, function(x) read.csv(x, fileEncoding = "latin1"))
# Standardize column names
data_list <- lapply(data_list, function(df) {
colnames(df) <- make.names(colnames(df), unique = TRUE)
return(df)
})
# Bind the data into one DataFrame
data <- bind_rows(data_list, .id = "Sample_ID")
View(data)
# Define the file path
file_path <- "F:/nmr/biofluids/NMR-based-metabonomics-for-biofluids/Data/Dummy"
# Import the files with encoding specified
file_names <- list.files(file_path, full.names = TRUE, pattern = "Sample_.*\\.csv")
data_list <- lapply(file_names, read.csv)
# Bind the data into one DataFrame
data <- bind_rows(data_list, .id = "Sample_ID")
# Add group information
data <- data %>%
mutate(Group = if_else(Sample_ID %in% c("1", "2", "3"), "V", "P"))
# Write the combined data to a new CSV file
write.csv(data, file = file.path(file_path, "Combined_Data.csv"), row.names = FALSE)
View(data)
str(data)
# Filter out rows where Compound_Name is "DSS"
data <- data %>%
filter(Compound_Name != "DSS")
# Prepare data for PCA
pca_data <- data %>%
select(Compound_Name, Concentration_µM, Group) %>%
pivot_wider(names_from = Compound_Name, values_from = Concentration_µM) %>%
column_to_rownames("Group") %>%
select(-Group)
# Prepare data for PCA
pca_data <- data %>%
select(Compound_Name, Concentration_uM, Group) %>%
pivot_wider(names_from = Compound_Name, values_from = Concentration_µM) %>%
column_to_rownames("Group") %>%
select(-Group)
# Prepare data for PCA
pca_data <- data %>%
select(Compound_Name, Concentration_uM, Group) %>%
pivot_wider(names_from = Compound_Name, values_from = Concentration_uM) %>%
column_to_rownames("Group") %>%
select(-Group)
# Perform PCA
pca_results <- PCA(as.matrix(pca_data), graph = FALSE)
# Prepare data for PCA
pca_data <- data %>%
select(Compound_Name, Concentration_uM, Group) %>%
pivot_wider(names_from = Compound_Name, values_from = Concentration_uM) %>%
column_to_rownames("Group") %>%
select(-Group)
View(data)
str(data)
# Prepare data for PCA
pca_data <- data %>%
group_by(Group, Compound_Name) %>% # Group by Group and Compound_Name
summarise(Concentration_uM = mean(Concentration_uM, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = Compound_Name, values_from = Concentration_uM) %>%
column_to_rownames("Group") # Set Group as row names
# Check PCA data structure
print(pca_data)
# Perform PCA
pca_results <- PCA(as.matrix(pca_data), graph = FALSE)
# Plot PCA
fviz_pca_ind(pca_results,
habillage = data$Group,
addEllipses = TRUE,
palette = c("#2E9FDF", "#00AFBB"),
title = "PCA of Metabolomics Data")
# Plot PCA
fviz_pca_ind(pca_results,
habillage = rownames(pca_data),
addEllipses = TRUE,
palette = c("#2E9FDF", "#00AFBB"),
title = "PCA of Metabolomics Data")
dim(pca_data)
View(pca_data)
View(pca_data)
# Prepare data for PCA
pca_data <- data %>%
select(Sample_ID, Compound_Name, Concentration_uM) %>% # Keep Sample_ID
pivot_wider(names_from = Compound_Name, values_from = Concentration_uM) %>% # Create wide format
column_to_rownames("Sample_ID") # Set Sample_ID as row names
# Check PCA data
print(head(pca_data))
# Perform PCA
pca_results <- PCA(as.matrix(pca_data), graph = FALSE)
# Plot PCA
fviz_pca_ind(pca_results,
habillage = rownames(pca_data),
addEllipses = TRUE,
palette = c("#2E9FDF", "#00AFBB"),
title = "PCA of Metabolomics Data")
# Perform PCA
pca_results <- PCA(as.matrix(pca_data), graph = FALSE)
# Map Group Information for Visualization
sample_groups <- data %>% select(Sample_ID, Group) %>% distinct()
# Plot PCA
fviz_pca_ind(pca_results,
habillage = sample_groups$Group, # Use Group for coloring
addEllipses = TRUE,
palette = c("#2E9FDF", "#00AFBB"),
title = "PCA of Metabolomics Data")
all(rownames(pca_data) %in% sample_groups$Sample_ID)
# Match Group information with PCA samples
group_labels <- sample_groups %>%
filter(Sample_ID %in% rownames(pca_data)) %>%
arrange(match(Sample_ID, rownames(pca_data))) %>%
pull(Group)
# Plot PCA
fviz_pca_ind(pca_results,
habillage = group_labels, # Use matched group labels for coloring
addEllipses = TRUE,
palette = c("#2E9FDF", "#00AFBB"),
title = "PCA of Metabolomics Data")
View(pca_results)
# Perform PCA using base R
pca_results <- prcomp(pca_data, scale. = TRUE)
# Extract PCA results for plotting
pca_scores <- as.data.frame(pca_results$x) # PCA scores
pca_var <- summary(pca_results)$importance # Explained variance
pca_scores$Sample_ID <- rownames(pca_data) # Add Sample_ID for identification
# Merge with group information
pca_scores <- pca_scores %>%
left_join(sample_groups, by = "Sample_ID")
# Plot the first two principal components
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Group)) +
geom_point(size = 3) +
stat_ellipse(geom = "polygon", alpha = 0.2, aes(fill = Group), show.legend = FALSE) +
theme_minimal() +
labs(title = "PCA of Metabolomics Data",
x = paste0("PC1 (", round(pca_var[2, 1] * 100, 1), "%)"),
y = paste0("PC2 (", round(pca_var[2, 2] * 100, 1), "%)"))
# Prepare data for Heatmap
heatmap_data <- data %>%
pivot_wider(names_from = Compound_Name, values_from = Concentration_µM) %>%
column_to_rownames("Sample_ID")
# Pivot wider to prepare data for heatmap
heatmap_data <- data %>%
select(Sample_ID, Compound_Name, Concentration_uM) %>%
pivot_wider(names_from = Sample_ID, values_from = Concentration_uM)
# Extract Group information for samples
sample_groups <- data %>%
select(Sample_ID, Group) %>%
distinct()
# Convert the wide data to a matrix (excluding Compound_Name)
heatmap_matrix <- as.matrix(heatmap_data %>% select(-Compound_Name))
# Ensure rows are named by Compound_Name
rownames(heatmap_matrix) <- heatmap_data$Compound_Name
# Create annotation for heatmap columns (Sample_ID -> Group)
column_annotation <- sample_groups$Group
names(column_annotation) <- sample_groups$Sample_ID
library(pheatmap)
# Plot heatmap
pheatmap(heatmap_matrix,
scale = "row", # Scale rows (standardize metabolites)
cluster_rows = TRUE, # Cluster metabolites
cluster_cols = TRUE, # Cluster samples
annotation_col = data.frame(Group = column_annotation), # Add group annotation
show_rownames = TRUE, # Show metabolite names
show_colnames = TRUE, # Show sample IDs
main = "Heatmap of Metabolomics Data")
# Identify top 5 metabolites for each group
top_metabolites <- data %>%
group_by(Group, Compound_Name) %>%
summarise(Average_Concentration = mean(Concentration_µM, na.rm = TRUE)) %>%
arrange(Group, desc(Average_Concentration)) %>%
group_by(Group) %>%
slice_max(order_by = Average_Concentration, n = 5)
# Identify top 5 metabolites for each group
top_metabolites <- data %>%
group_by(Group, Compound_Name) %>%
summarise(Average_Concentration = mean(Concentration_uM, na.rm = TRUE)) %>%
arrange(Group, desc(Average_Concentration)) %>%
group_by(Group) %>%
slice_max(order_by = Average_Concentration, n = 5)
print(top_metabolites)
# Compare "V" vs "P" for top 5 metabolites
comparison <- top_metabolites %>%
pivot_wider(names_from = Group, values_from = Average_Concentration) %>%
mutate(Fold_Change = V / P)
print(comparison)
# Identify top 5 metabolites for each group
top_metabolites <- data %>%
group_by(Group, Compound_Name) %>%
summarise(Average_Concentration = mean(Concentration_uM, na.rm = TRUE)) %>%
arrange(Group, desc(Average_Concentration)) %>%
group_by(Group) %>%
slice_max(order_by = Average_Concentration, n = 5) %>%
ungroup()
# Filter the original data to include only the top metabolites
top_metabolites_data <- data %>%
filter(Compound_Name %in% top_metabolites$Compound_Name)
# Plot box plots for the top 5 metabolites
ggplot(top_metabolites_data, aes(x = Group, y = Concentration_uM, fill = Group)) +
geom_boxplot() +
facet_wrap(~Compound_Name, scales = "free_y") +
theme_minimal() +
labs(
title = "Box Plot of Top 5 Metabolites by Group",
x = "Group",
y = "Concentration (µM)"
) +
theme(
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none"
)
# Load required library
library(dplyr)
# Function to generate a completely random sample
generate_new_sample <- function(num_entries) {
data.frame(
HMDB_ID = sprintf("HMDB%05d", 1:num_entries),
Compound_Name = paste0("Compound_", 1:num_entries),
Concentration_uM = runif(num_entries, 10, 500),
Threshold = runif(num_entries, 1, 10),
Confidence_Score = runif(num_entries, 5, 10)
)
}
# Function to generate a sample similar to a given sample
generate_similar_sample <- function(base_sample, variation = 0.1) {
base_sample %>%
mutate(
Concentration_uM = Concentration_uM * (1 + runif(n(), -variation, variation)),
Threshold = Threshold * (1 + runif(n(), -variation, variation)),
Confidence_Score = Confidence_Score * (1 + runif(n(), -variation, variation))
)
}
# Generate the samples
num_entries <- 48
sample_7 <- generate_new_sample(num_entries)
sample_7$Group <- "PP"
sample_8 <- generate_similar_sample(sample_7, variation = 0.1)
sample_8$Group <- "PP"
sample_9 <- generate_new_sample(num_entries)
sample_9$Group <- "PP"
setwd("C:/Users/akila/OneDrive/Desktop")
# Save to CSV files
write.csv(sample_7, "Sample_7.csv", row.names = FALSE)
write.csv(sample_8, "Sample_8.csv", row.names = FALSE)
write.csv(sample_9, "Sample_9.csv", row.names = FALSE)
cat("Files saved: Sample_7.csv, Sample_8.csv, Sample_9.csv\n")
setwd("F:/nmr/biofluids/NMR-based-metabonomics-for-biofluids")
# Load required libraries
library(tidyverse)
library(pheatmap)
# Define the file path
file_path <- "F:/nmr/biofluids/NMR-based-metabonomics-for-biofluids/Data/Dummy"
# Import the files with encoding specified
file_names <- list.files(file_path, full.names = TRUE, pattern = "Sample_.*\\.csv")
data_list <- lapply(file_names, read.csv)
# Define the file path
file_path <- "F:/nmr/biofluids/NMR-based-metabonomics-for-biofluids/Data/Dummy"
# Import the files with encoding specified
file_names <- list.files(file_path, full.names = TRUE, pattern = "Sample_.*\\.csv")
data_list <- lapply(file_names, read.csv)
# Bind the data into one DataFrame
data <- bind_rows(data_list, .id = "Sample_ID")
# Add group information
data <- data %>%
mutate(Group = case_when(
Sample_ID %in% c("1", "2", "3") ~ "V",
Sample_ID %in% c("4", "5", "6") ~ "P",
Sample_ID %in% c("7", "8", "9") ~ "PP"
))
# Write the combined data to a new CSV file
write.csv(data, file = file.path(file_path, "Combined_Data.csv"), row.names = FALSE)
# Filter out rows where Compound_Name is "DSS"
data <- data %>%
filter(Compound_Name != "DSS")
# Prepare data for PCA
pca_data <- data %>%
select(Sample_ID, Compound_Name, Concentration_uM) %>% # Keep Sample_ID
pivot_wider(names_from = Compound_Name, values_from = Concentration_uM) %>% # Create wide format
column_to_rownames("Sample_ID") # Set Sample_ID as row names
# Perform PCA using base R
pca_results <- prcomp(pca_data, scale. = TRUE)
# Extract PCA results for plotting
pca_scores <- as.data.frame(pca_results$x) # PCA scores
pca_var <- summary(pca_results)$importance # Explained variance
pca_scores$Sample_ID <- rownames(pca_data) # Add Sample_ID for identification
# Merge with group information
sample_groups <- data %>% select(Sample_ID, Group) %>% distinct()
pca_scores <- pca_scores %>%
left_join(sample_groups, by = "Sample_ID")
# Plot the first two principal components
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Group)) +
geom_point(size = 3) +
stat_ellipse(geom = "polygon", alpha = 0.2, aes(fill = Group), show.legend = FALSE) +
theme_minimal() +
labs(title = "PCA of Metabolomics Data",
x = paste0("PC1 (", round(pca_var[2, 1] * 100, 1), "%)"),
y = paste0("PC2 (", round(pca_var[2, 2] * 100, 1), "%)"))
# Pivot wider to prepare data for heatmap
heatmap_data <- data %>%
select(Sample_ID, Compound_Name, Concentration_uM) %>%
pivot_wider(names_from = Sample_ID, values_from = Concentration_uM)
# Extract Group information for samples
sample_groups <- data %>%
select(Sample_ID, Group) %>%
distinct()
# Convert the wide data to a matrix (excluding Compound_Name)
heatmap_matrix <- as.matrix(heatmap_data %>% select(-Compound_Name))
# Ensure rows are named by Compound_Name
rownames(heatmap_matrix) <- heatmap_data$Compound_Name
# Create annotation for heatmap columns (Sample_ID -> Group)
column_annotation <- sample_groups$Group
names(column_annotation) <- sample_groups$Sample_ID
# Plot heatmap
pheatmap(heatmap_matrix,
scale = "row", # Scale rows (standardize metabolites)
cluster_rows = TRUE, # Cluster metabolites
cluster_cols = TRUE, # Cluster samples
annotation_col = data.frame(Group = column_annotation), # Add group annotation
show_rownames = TRUE, # Show metabolite names
show_colnames = TRUE, # Show sample IDs
main = "Heatmap of Metabolomics Data")
# Identify top 5 metabolites for each group
top_metabolites <- data %>%
group_by(Group, Compound_Name) %>%
summarise(Average_Concentration = mean(Concentration_uM, na.rm = TRUE)) %>%
arrange(Group, desc(Average_Concentration)) %>%
group_by(Group) %>%
slice_max(order_by = Average_Concentration, n = 5) %>%
ungroup()
print(top_metabolites)
# Compare groups for top 5 metabolites
comparison <- top_metabolites %>%
pivot_wider(names_from = Group, values_from = Average_Concentration) %>%
mutate(across(everything(), ~ replace_na(.x, 0))) %>% # Handle missing values
mutate(Fold_Change_VP = V / P,
Fold_Change_PP = PP / P)
print(comparison)
# Plot box plots for the top 5 metabolites
top_metabolites_data <- data %>%
filter(Compound_Name %in% top_metabolites$Compound_Name)
ggplot(top_metabolites_data, aes(x = Group, y = Concentration_uM, fill = Group)) +
geom_boxplot() +
facet_wrap(~Compound_Name, scales = "free_y") +
theme_minimal() +
labs(
title = "Box Plot of Top 5 Metabolites by Group",
x = "Group",
y = "Concentration (µM)"
) +
theme(
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none"
)
